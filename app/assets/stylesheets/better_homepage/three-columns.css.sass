// This is CSS for a *better* holy grail layout.
// By better, I mean:
//   - Responsive without JavaScript
//   - The heights of each column element don't affect elements in other columns
//   - Columns "mesh" on mobile screens, with custom ordering
//   - Theoretically supports IE >= 8 (I've only tested it on IE11)
//
// NOTES:
//   Below 56rem, the layout container switches to `display: flex` and displays
// all the elements vertically.  If, for example, you want a right-aside to appear
// between center elements, you can give the element an explicit order index by
// giving the element a style property of `order: n;`.  This seems like an appropriate
// use of the style property, especially when used programmatically.
//
// THINGS TO KEEP IN MIND:
//   The total height of the left column, because the elements are absolute positioned
// should not exceed the height of the other columns, unless you don't mind the
// elements "overflowing" out of the bottom of the container.

=columns-single
  // Mobile is considered first.
  width: 100%
  display: flex
  flex-wrap: wrap
  overflow: hidden
  .left, .center, .right
    width: 100%

=columns-three($screen-size, $left-size, $center-size, $right-size)
  @media all and (min-width: $screen-size)
    display: block
    .left
      float: left
      width: $left-size
      $left-aside: 1
      // If your left asides are all the same size
      // they will stack automatically.
      //
      // The number used in this loop is arbitrary.
      // It should support however many items you
      // need to appear on the left.
      @while $left-aside < 11
        &:nth-child(#{$left-aside})
          transform: translateY((100% * $left-aside) - 100)
        $left-aside: $left-aside + 1
    .center
      display: inline-flex
      margin-left: $left-size
      width: $center-size
    .right
      float: right
      clear: right
      width: $right-size